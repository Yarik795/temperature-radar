class TemperatureChart {
    constructor() {
        this.data = [];
        this.filteredData = [];
        this.targetTemperature = 24;
        this.tolerance = 1;
        this.width = 800;
        this.height = 800;
        this.radius = Math.min(this.width, this.height) / 2 - 100;
        
        console.log('üîß TemperatureChart –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        console.log('üìè –†–∞–∑–º–µ—Ä—ã:', this.width, 'x', this.height, '—Ä–∞–¥–∏—É—Å:', this.radius);
        
        this.init();
    }

    async init() {
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
        await this.loadData();
        this.setupEventListeners();
        this.createChart();
        this.updateStats();
        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    }

    async loadData() {
        try {
            console.log('üì• –ó–∞–≥—Ä—É–∂–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ...');
            const response = await fetch('dataexport_20250813T194724.csv');
            const csvText = await response.text();
            console.log('üìÑ CSV –∑–∞–≥—Ä—É–∂–µ–Ω, —Ä–∞–∑–º–µ—Ä:', csvText.length, '—Å–∏–º–≤–æ–ª–æ–≤');
            this.parseCSV(csvText);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            this.showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ —Ñ–∞–π–ª CSV –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ.');
        }
    }

    parseCSV(csvText) {
        const lines = csvText.split('\n');
        this.data = [];
        
        console.log('üîç –ü–∞—Ä—Å–∏–º CSV, –≤—Å–µ–≥–æ —Å—Ç—Ä–æ–∫:', lines.length);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–ø–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫)
        for (let i = 10; i < lines.length; i++) {
            const line = lines[i].trim();
            if (line && line.includes(',')) {
                const [timestamp, tempStr] = line.split(',');
                const temperature = parseFloat(tempStr);
                
                if (!isNaN(temperature)) {
                    // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É: YYYYMMDDTHHMM
                    const year = parseInt(timestamp.substring(0, 4));
                    const month = parseInt(timestamp.substring(4, 6));
                    const day = parseInt(timestamp.substring(6, 8));
                    const hour = parseInt(timestamp.substring(9, 11));
                    
                    // –í—ã—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å –≥–æ–¥–∞ (1-365/366)
                    const date = new Date(year, month - 1, day);
                    const dayOfYear = Math.floor((date - new Date(year, 0, 0)) / (1000 * 60 * 60 * 24));
                    
                    this.data.push({
                        timestamp,
                        temperature,
                        year,
                        month,
                        day,
                        hour,
                        dayOfYear,
                        date: date
                    });
                }
            }
        }
        
        console.log(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.data.length} –∑–∞–ø–∏—Å–µ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö`);
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        const temps = this.data.map(d => d.temperature);
        const minTemp = Math.min(...temps);
        const maxTemp = Math.max(...temps);
        console.log(`üå°Ô∏è –î–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä: –æ—Ç ${minTemp.toFixed(2)}¬∞C –¥–æ ${maxTemp.toFixed(2)}¬∞C`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä
        const sampleTemps = temps.slice(0, 20);
        console.log('üìä –ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä:', sampleTemps.map(t => t.toFixed(2)));
    }

    setupEventListeners() {
        console.log('üéÆ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π...');
        
        document.getElementById('updateBtn').addEventListener('click', () => {
            this.targetTemperature = parseFloat(document.getElementById('temperature').value);
            this.tolerance = parseFloat(document.getElementById('tolerance').value);
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É:', this.targetTemperature, '¬±', this.tolerance);
            this.updateChart();
        });

        document.getElementById('resetBtn').addEventListener('click', () => {
            document.getElementById('temperature').value = '24';
            document.getElementById('tolerance').value = '1';
            this.targetTemperature = 24;
            this.tolerance = 1;
            console.log('üîÑ –°–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é');
            this.updateChart();
        });

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ Enter
        document.getElementById('temperature').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                document.getElementById('updateBtn').click();
            }
        });

        document.getElementById('tolerance').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                document.getElementById('updateBtn').click();
            }
        });
        
        console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã');
    }

    createChart() {
        console.log('üé® –°–æ–∑–¥–∞–µ–º SVG –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...');
        
        const chartContainer = document.getElementById('chart');
        if (!chartContainer) {
            console.error('‚ùå –≠–ª–µ–º–µ–Ω—Ç #chart –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            return;
        }
        
        console.log('üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω:', chartContainer);
        
        const svg = d3.select('#chart')
            .append('svg')
            .attr('width', this.width)
            .attr('height', this.height)
            .append('g')
            .attr('transform', `translate(${this.width/2}, ${this.height/2})`);

        this.svg = svg;
        console.log('‚úÖ SVG —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä—ã:', this.width, 'x', this.height);
        
        this.updateChart();
    }

    updateChart() {
        if (!this.svg) {
            console.error('‚ùå SVG –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
            return;
        }

        console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∏–∞–≥—Ä–∞–º–º—É...');

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        this.svg.selectAll('*').remove();

        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ —Å —É—á–µ—Ç–æ–º –æ–∫—Ä—É–≥–ª–µ–Ω–∏—è
        this.filteredData = this.data.filter(d => {
            // –û–∫—Ä—É–≥–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
            const roundedDataTemp = Math.round(d.temperature * 10) / 10;
            const roundedTargetTemp = Math.round(this.targetTemperature * 10) / 10;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –æ–∫—Ä—É–≥–ª–µ–Ω–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
            const isInRange = Math.abs(roundedDataTemp - roundedTargetTemp) <= this.tolerance;
            
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
            if (d.dayOfYear <= 3 && d.hour <= 3) {
                console.log(`üìÖ –î–µ–Ω—å ${d.dayOfYear}, —á–∞—Å ${d.hour}: ${d.temperature}¬∞C -> ${roundedDataTemp}¬∞C, —Ü–µ–ª—å: ${roundedTargetTemp}¬∞C ¬±${this.tolerance}, –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: ${isInRange}`);
            }
            
            return isInRange;
        });

        console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${this.filteredData.length} –∑–∞–ø–∏—Å–µ–π –¥–ª—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã ${this.targetTemperature}¬∞C ¬±${this.tolerance}¬∞C`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
        if (this.filteredData.length > 0) {
            const examples = this.filteredData.slice(0, 5);
            console.log('üìã –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π:', examples.map(d => 
                `${d.dayOfYear} –¥–µ–Ω—å, ${d.hour}:00 - ${d.temperature.toFixed(2)}¬∞C`
            ));
        }

        // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
        this.createCircularChart();
        this.updateStats();
    }

    createCircularChart() {
        console.log('‚≠ï –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É...');
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ—Ç–∫—É: –¥–Ω–∏ –ø–æ —É–≥–ª–∞–º, —á–∞—Å—ã –ø–æ —Ä–∞–¥–∏—É—Å–∞–º
        const daysInYear = 365;
        const hoursInDay = 24;
        
        console.log(`üìÖ –°–æ–∑–¥–∞–µ–º ${daysInYear} –¥–Ω–µ–π √ó ${hoursInDay} —á–∞—Å–æ–≤ = ${daysInYear * hoursInDay} —Å–µ–∫—Ç–æ—Ä–æ–≤`);
        
        // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ç–æ—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞ –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
        const sectors = [];
        
        for (let day = 0; day < daysInYear; day++) {
            for (let hour = 0; hour < hoursInDay; hour++) {
                const dayAngle = (day / daysInYear) * 2 * Math.PI;
                const hourRadius = (hour / hoursInDay) * this.radius;
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                const hasData = this.filteredData.some(d => 
                    d.dayOfYear === day + 1 && d.hour === hour
                );
                
                sectors.push({
                    day,
                    hour,
                    dayAngle,
                    hourRadius,
                    hasData,
                    innerRadius: hourRadius,
                    outerRadius: hourRadius + (this.radius / hoursInDay)
                });
            }
        }

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${sectors.length} —Å–µ–∫—Ç–æ—Ä–æ–≤`);

        // –°–æ–∑–¥–∞–µ–º –¥—É–≥–∏
        const arc = d3.arc()
            .innerRadius(d => d.innerRadius)
            .outerRadius(d => d.outerRadius)
            .startAngle(d => d.dayAngle)
            .endAngle(d => d.dayAngle + (2 * Math.PI / daysInYear));

        // –†–∏—Å—É–µ–º —Å–µ–∫—Ç–æ—Ä—ã
        const sectorsGroup = this.svg.selectAll('.sector')
            .data(sectors)
            .enter()
            .append('path')
            .attr('class', 'sector')
            .attr('d', arc)
            .attr('fill', d => d.hasData ? '#ff6b6b' : '#4ecdc4')
            .attr('opacity', d => d.hasData ? 0.8 : 0.3)
            .attr('stroke', '#fff')
            .attr('stroke-width', 0.5)
            .on('mouseover', (event, d) => this.showTooltip(event, d))
            .on('mouseout', () => this.hideTooltip());

        console.log(`üé® –û—Ç—Ä–∏—Å–æ–≤–∞–Ω–æ ${sectorsGroup.size()} —Å–µ–∫—Ç–æ—Ä–æ–≤`);

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–∏
        this.addAxes();
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∏ –º–µ—Å—è—Ü–µ–≤
        this.addMonthLabels();
        
        console.log('‚úÖ –ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å–æ–∑–¥–∞–Ω–∞');
    }

    addAxes() {
        console.log('üìè –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–∏...');
        
        // –†–∞–¥–∏–∞–ª—å–Ω—ã–µ –æ—Å–∏ (—á–∞—Å—ã)
        for (let hour = 0; hour <= 24; hour += 6) {
            const radius = (hour / 24) * this.radius;
            const angle = 0;
            
            this.svg.append('line')
                .attr('x1', Math.cos(angle) * radius)
                .attr('y1', Math.sin(angle) * radius)
                .attr('x2', Math.cos(angle) * (radius + 20))
                .attr('y2', Math.sin(angle) * (radius + 20))
                .attr('stroke', '#999')
                .attr('stroke-width', 2);

            this.svg.append('text')
                .attr('x', Math.cos(angle) * (radius + 35))
                .attr('y', Math.sin(angle) * (radius + 35))
                .attr('text-anchor', 'middle')
                .attr('dominant-baseline', 'middle')
                .attr('fill', '#666')
                .attr('font-size', '12px')
                .text(`${hour}:00`);
        }

        // –£–≥–ª–æ–≤—ã–µ –æ—Å–∏ (–¥–Ω–∏)
        const monthDays = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334];
        const monthNames = ['–Ø–Ω–≤', '–§–µ–≤', '–ú–∞—Ä', '–ê–ø—Ä', '–ú–∞–π', '–ò—é–Ω', '–ò—é–ª', '–ê–≤–≥', '–°–µ–Ω', '–û–∫—Ç', '–ù–æ—è', '–î–µ–∫'];
        
        monthDays.forEach((day, i) => {
            const angle = (day / 365) * 2 * Math.PI - Math.PI / 2;
            const x = Math.cos(angle) * (this.radius + 40);
            const y = Math.sin(angle) * (this.radius + 40);
            
            this.svg.append('text')
                .attr('x', x)
                .attr('y', y)
                .attr('text-anchor', 'middle')
                .attr('dominant-baseline', 'middle')
                .attr('fill', '#666')
                .attr('font-size', '14px')
                .attr('font-weight', 'bold')
                .text(monthNames[i]);
        });
        
        console.log('‚úÖ –û—Å–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã');
    }

    addMonthLabels() {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å—å
        this.svg.append('text')
            .attr('x', 0)
            .attr('y', 0)
            .attr('text-anchor', 'middle')
            .attr('dominant-baseline', 'middle')
            .attr('fill', '#667eea')
            .attr('font-size', '16px')
            .attr('font-weight', 'bold')
            .text(`${this.targetTemperature}¬∞C`);
            
        console.log('‚úÖ –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞');
    }

    showTooltip(event, d) {
        const tooltip = d3.select('body').append('div')
            .attr('class', 'tooltip')
            .style('left', (event.pageX + 10) + 'px')
            .style('top', (event.pageY - 10) + 'px');

        const date = new Date(2024, 0, d.day + 1);
        const monthName = date.toLocaleDateString('ru-RU', { month: 'long' });
        const dayName = date.toLocaleDateString('ru-RU', { weekday: 'long' });
        
        tooltip.html(`
            <strong>${d.day + 1} ${monthName}</strong><br>
            ${dayName}<br>
            –í—Ä–µ–º—è: ${d.hour.toString().padStart(2, '0')}:00<br>
            ${d.hasData ? '‚úÖ –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ' : '‚ùå –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞'}
        `);
    }

    hideTooltip() {
        d3.selectAll('.tooltip').remove();
    }

    updateStats() {
        const totalRecords = this.data.length;
        const matchingRecords = this.filteredData.length;
        const percentage = totalRecords > 0 ? ((matchingRecords / totalRecords) * 100).toFixed(1) : 0;
        
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä –≤ –¥–∞–Ω–Ω—ã—Ö
        const temps = this.data.map(d => d.temperature);
        const minTemp = Math.min(...temps);
        const maxTemp = Math.max(...temps);
        
        const statsHtml = `
            <p><strong>–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π:</strong> ${totalRecords.toLocaleString()}</p>
            <p><strong>–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–∞–ø–∏—Å–µ–π:</strong> ${matchingRecords.toLocaleString()}</p>
            <p><strong>–ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π:</strong> ${percentage}%</p>
            <p><strong>–î–∏–∞–ø–∞–∑–æ–Ω:</strong> ${(this.targetTemperature - this.tolerance).toFixed(1)}¬∞C - ${(this.targetTemperature + this.tolerance).toFixed(1)}¬∞C</p>
            <p><strong>–î–∞–Ω–Ω—ã–µ –≤ CSV:</strong> –æ—Ç ${minTemp.toFixed(1)}¬∞C –¥–æ ${maxTemp.toFixed(1)}¬∞C</p>
        `;
        
        document.getElementById('stats').innerHTML = statsHtml;
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞');
    }

    showError(message) {
        const errorDiv = document.createElement('div');
        errorDiv.style.cssText = `
            position: fixed;
            top: 20px;
            right: 20px;
            background: #ff6b6b;
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.2);
            z-index: 10000;
            max-width: 300px;
        `;
        errorDiv.textContent = message;
        document.body.appendChild(errorDiv);
        
        setTimeout(() => {
            errorDiv.remove();
        }, 5000);
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('üöÄ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ–∑–¥–∞–µ–º TemperatureChart...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ D3.js
    if (typeof d3 === 'undefined') {
        console.error('‚ùå D3.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏');
        alert('–û–®–ò–ë–ö–ê: D3.js –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ head');
        return;
    }
    
    console.log('‚úÖ D3.js –¥–æ—Å—Ç—É–ø–µ–Ω, –≤–µ—Ä—Å–∏—è:', d3.version);
    
    try {
        new TemperatureChart();
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ TemperatureChart:', error);
        alert('–û–®–ò–ë–ö–ê –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏–∞–≥—Ä–∞–º–º—ã: ' + error.message);
    }
});
